<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[转义字符]]></title>
    <url>%2F2018%2F11%2F05%2F%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[C++中的转义字符总结如下： 字符名称 C++代码 十进制ASCII码值 换行符 \n 10 水平制表符 \t 9 垂直制表符 \v 11 退格 \b 8 回车 \r 13 需要注意的是，处理转义序列时，要像处理常规序列一致，它们可以被嵌入较长的字符串中，程序依然可以识别并执行它们。在单独使用时，由于它们是一个单字符，因此也要用单引号括起。]]></content>
      <categories>
        <category>C++基础语法部分</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>转义字符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据类型与声明]]></title>
    <url>%2F2018%2F11%2F05%2F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%A3%B0%E6%98%8E%2F</url>
    <content type="text"><![CDATA[整型一般整型整形用于存储整数，C++所存储的整数是所有整数的一个子集。针对不同的区间，C++提供了多种不同的整形类型。具体如下所示： 类型 位数 short 至少为16位 int 至少与short一样长 long 至少32位，且至少与int一样长 long long 至少64位，且至少与long一样长 在上述变量声明中，在最开始加上unsigned，则为声明一个无符号数。此时它不能表示负数，但是正数的表示范围将扩大一倍上述变量可由以下形式进行声明及初始化： 123456789101112//变量声明方法short a;int b;long c;long long d;unsigned d1; //声明无符号数//变量声明与初始化int e=5;int f(123); //注意，该种初始化方式仅限于C++语言使用int g=e+f;int h=&#123;1&#125;;int i&#123;1&#125;; //大括号的初始化方法通常用于数组和结构，但在C++中，也可以用于进行单值变量的初始化 在C++中，默认使用十进制进行数字表示。但通过控制也可以输出其他进制的数字。如在下面的程序段中，输出结果将为“2a”，也就是42的十六进制表示。 123int chest=42;cout&lt;&lt;hex;cout&lt;&lt;chest; 字符类型字符类型char也可以被当做是一种整形，是专门为了存储字符而设计的。在计算机中，这些字符由其ASCII码值进行保存。这里请注意，由于在char中保存的其实是字符的ASCII码值，因而保存的其实是一个整数，故而对于整数的所有运算值对于char而言全部适用。在输出时，cout会根据char类型，输出该数值对应的字符。如下所示： 1234char A;cin&gt;&gt;A;A=A+1;cout&lt;&lt;A; 此时的输入输出将如下所示： 12ab bool类型bool类型是一种逻辑运算符，其值有两种形式，分别为true和false。在判断语句中，经常使用。请注意，对于bool变量赋值时，所有非零值均会被转换为true，0则会被转换为false。 12345bool is_ready=true; //定义布尔变量，初始化为trueint ans=true; //true被转化为整形时，值为1int ans=false; //false被转化为整形时，值为0bool start=-100; //非零值，为truebool end=0; //初值为0，为false 浮点类型与整型一样，浮点类型一般也有三种表示形式，float、double和long double。一般来讲，float的位数至少为32位，double的位数不小于float且至少为48位，而long double则要更长。相比于整型，浮点类型可以表达的数字更大，但是其运算效率一般低于整型。同时，由于存在精度的问题，浮点类型的计算结果可能会出现偏差。 C++基本算数运算C++中的算术运算符可以总结如下： 符号 作用 + 执行加法运算 - 执行减法运算 * 执行乘法运算 / 执行除法运算，若除号两边均为整数，则结果为商的整数部分 % 执行取余运算，请注意，该运算符两端必须均为整数 类型转换C++会在不同场合下，根据需要对值得类型进行转换 初始化和赋值间的转换123long int a=1;short int b=2;a=b; //b的值扩展为long int之后赋给a 表达式中的转换在该种转换中，所有低等级的变量将自动被转换为高等级的变量，如short将会被自动转换为int。 强制类型转换C++允许进行显式形式的强制类型转换，比如下面的表达： 123(long) thorn;thorn (long);cout&lt;&lt;int('Q'); 请注意，上述转换中，并没有改变原先变量本身，而是创造出了一个新的、指定类型的值。 auto声明C++中，可以使用auto进行声明与初始化，编译器会根据初始化结果给变量设定类型，举例如下： 12auto n=100; //编译器定位整型auto x=1.5; //编译器定为double 但是，该种定义方式并不提倡。]]></content>
      <categories>
        <category>C++基础语法部分</category>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[markdown的基本语法]]></title>
    <url>%2F2018%2F11%2F04%2Fmarkdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[markdown 是一种纯文本格式的标记语言，其标记语法非常的简单。利用markdown，可以使简单的文本具有一定的格式。其基本的使用方法如下所示： 1.利用#号来增加标题。标准语法中，#后面需要增加空格。 123# 一级标题## 二级标题### 三级标题 上述代码段的测试结果如下： 一级标题二级标题三级标题2.斜体，斜体的文字部分左右各用一个*号包起来。代码如下（后续其他操作请参照该代码执行）。1*要斜体的文字* 上述代码段的测试结果如下： 要斜体的文字3.加粗，加粗的文字部分左右各用两个**号包起来，结果如下： 要加粗的文字 4.斜体加粗，使用三个*号包起来，结果如下： 要斜体加粗的文字 5.删除线，使用两个~包起来，结果如下 要删除的文字 6.引用，在被引用文字的前面加&gt;号即可，这里的引用允许嵌套使用。嵌套的层数等于&gt;号的个数，测试如下： 一层引用 二层引用 三层引用 7.分割线，使用三个及以上-或者星号都可以，其效果相同 8.增加图片，其基本的语法如下所示： 1![图片alt](图片地址 ''图片title'') 图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 9.超链接，与增加图片的方式类似，代码段如下所示： 1[超链接名](超链接地址 "超链接title") 10.表格，其基本的代码段如下所示： 1234表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容 上述代码段的第二行用于进行表头和内容的分割，其中的冒号决定了内部的对齐方式，默认文字为靠左对齐。双冒号则为居中，右侧冒号为靠右对齐，测试结果如下： 表头 表头 表头 内容 内容 内容 内容 内容 内容 11.代码段，单行代码用一对反引号括住，多行代码用三对反引号括住。上面的例子中已经显示出了代码段的表达效果。 后续内容持续补充。]]></content>
      <categories>
        <category>其他操作</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo多端发布相关操作]]></title>
    <url>%2F2018%2F11%2F04%2Fhexo-oper%2F</url>
    <content type="text"><![CDATA[在不同的端口进行相关操作时，需要按照下述方法进行： 123456git pull origin hexo //先pull完成本地与远端的融合hexo new post "new post name" //新建一个文件git add source //将新建文件进行添加git commit -m "将添加说明写在这里"git push origin hexo //将本地修改push到远程仓库hexo d -g //生成并发表]]></content>
      <categories>
        <category>其他操作</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语法学习开始]]></title>
    <url>%2F2018%2F11%2F02%2FC%2B%2B%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[这里是我的第一个基础C++语法段落。以“hello world”作为开始123456789#include&lt;iostream&gt;using namespace std;int main()&#123; char a[]="hello world"; cout&lt;&lt;a; return 0;&#125; 运行上述程序，即可在屏幕上输出“hello world”语句。]]></content>
      <categories>
        <category>C++基础语法部分</category>
        <category>基础</category>
      </categories>
  </entry>
</search>
